/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    nf-core/rnaseq Nextflow config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/

// Global default params, used in configs
params {

    // Input options (RNAseq)
    rnaseq_counts              = null

    // Input options (ChIPseq)
    chipseq_fragment_size      = 200
    chipseq_fingerprint_bins   = 500000
    chipseq_read_length        = null
    chipseq_peaks              = null



    // Max resource options (General)
    max_memory                 = '128.GB'
    max_cpus                   = 64
    max_time                   = '240.h'

    // TF-Prioritizer
    peakBindingSiteSearch      = 'incl_between'
    maxDistance                = 500
    min_count                  = 0
    min_tpm                    = 0
    mix_samples                = true
    min_occurrence             = 1
    taxonomy                   = null
    top_target_genes           = 30

    tepic_pwm                  = null
    tepic_windowSize           = 50000
    tepic_loopWindows          = 5000
    tepic_exponentialDecay     = true
    tepic_normalizePeakLength  = true
    tepic_maxMinutesPerChromosome = 3
    tepic_originalScaling      = false
    tepic_pValue               = 0.05
    tepic_affinityCutOff       = 0.05
    tepic_gtf                  = null

    dynamite_ofolds            = 3
    dynamite_ifolds            = 6
    dynamite_alpha             = 0.1
    dynamite_randomize         = false
    dynamite_min_regression    = 0.1

    chipatlas_tissue_types     = null
    chipatlas_genome           = null
    chipatlas_threshold        = 5
    biomart_species            = null

    ehmm_genomic_region_size   = 2000
    ehmm_train_split           = 0.8
    ehmm_random_seed           = 74726
    ehmm_top_quantile          = 1
    ehmm_n_samples             = -1
    ehmm_n_states              = 4
    ehmm_n_bins                = 100
    ehmm_pseudocount           = 1
    ehmm_antigens              = ["ATAC-Seq", "Histone_H3K27ac", "Histone_H3K4me1", "Histone_H3K4me3"]
}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Load nf-core custom profiles from different Institutions
try {
    includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
    System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}

// Load nf-core/rnaseq custom profiles from different institutions.
try {
    includeConfig "${params.custom_config_base}/pipeline/rnaseq.config"
} catch (Exception e) {
    System.err.println("WARNING: Could not load nf-core/config/rnaseq profiles: ${params.custom_config_base}/pipeline/rnaseq.config")
}

profiles {
    debug { process.beforeScript = 'echo $HOSTNAME' }
    conda {
        conda.enabled          = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    mamba {
        conda.enabled          = true
        conda.useMamba         = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    docker {
        docker.enabled         = true
        docker.userEmulation   = true
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    arm {
        docker.runOptions = '-u $(id -u):$(id -g) --platform=linux/amd64'
    }
    singularity {
        singularity.enabled    = true
        singularity.autoMounts = true
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    podman {
        podman.enabled         = true
        docker.enabled         = false
        singularity.enabled    = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    shifter {
        shifter.enabled        = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        charliecloud.enabled   = false
    }
    charliecloud {
        charliecloud.enabled   = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
    }
    gitpod {
        executor.name          = 'local'
        executor.cpus          = 16
        executor.memory        = 60.GB
    }
    test          { includeConfig 'conf/test.config'      }
    test_full     { includeConfig 'conf/test_full.config' }
    test_full_aws { includeConfig 'conf/test_full.config' }
    test_full_gcp {
        includeConfig 'conf/test_full.config'
        params.rnaseq_samplesheet = 'https://raw.githubusercontent.com/nf-core/test-datasets/rnaseq/samplesheet/v3.10/samplesheet_full_gcp.csv'
    }
    test_full_azure {
        includeConfig 'conf/test_full.config'
        params.rnaseq_samplesheet = 'https://raw.githubusercontent.com/nf-core/test-datasets/rnaseq/samplesheet/v3.10/samplesheet_full_azure.csv'
    }
}

// Load igenomes.config if required
if (!params.igenomes_ignore) {
    includeConfig 'conf/igenomes.config'
} else {
    params.genomes = [:]
}

// Export these variables to prevent local Python/R libraries from conflicting with those in the container
// The JULIA depot path has been adjusted to a fixed path `/usr/local/share/julia` that needs to be used for packages in the container.
// See https://apeltzer.github.io/post/03-julia-lang-nextflow/ for details on that. Once we have a common agreement on where to keep Julia packages, this is adjustable.

env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
    JULIA_DEPOT_PATH = "/usr/local/share/julia"
}

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.outdir}/pipeline_info/pipeline_dag_${trace_timestamp}.html"
}

manifest {
    name            = 'nf-core/tfprio'
    author          = """Nico Trummer"""
    homePage        = 'https://github.com/nf-core/tfprio'
    description     = """TF-Prioritizer"""
    mainScript      = 'main.nf'
    nextflowVersion = '!>=22.10.1'
    version         = '1.0dev'
    doi             = ''
}

// Load modules.config for DSL2 module specific options
if (!params.rnaseq_counts) {
    includeConfig 'conf/modules_rnaseq.config'
}
if (!params.chipseq_peaks) {
    includeConfig 'conf/modules_chipseq.config'
}
includeConfig 'conf/modules.config'

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
