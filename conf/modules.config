/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: CLEAN_BED {
        ext.args = {"'{print \$1 \"\\t\" \$2 \"\\t\" \$3}'"}
        ext.prefix = {"${meta.id}.clean"}
        ext.suffix = "bed"
    }

    withName: CLEAN_BED_ANNOTATE_SAMPLES {
        ext.args = {"'{ if (substr(\$1, 1, 3) != \"chr\") { \$1 = \"chr\" \$1; } {print \$1 \"\\t\" \$2 \"\\t\" \$3 \"\\t\" \"${meta.id}\"} }'"}
        ext.prefix = {"${meta.id}.sample_annotated"}
        ext.suffix = "bed"
    }

    withName: BEDTOOLS_SORT {
        ext.prefix = {"${meta.id}.sorted"}
    }

    withName: SORT_PEAKS {
        ext.prefix = {"${meta.id}.sorted"}
    }
    
    withName: SORT_FOOTPRINTS {
        ext.prefix = {"${meta.id}.sorted"}
    }

    withName: BEDTOOLS_MERGE {
        ext.prefix = {"${meta.id}.merged"}
    }

    withName: MERGE_PEAKS:BEDTOOLS_MERGE {
        ext.prefix = {"${meta.id}.merged"}
        ext.args = "-c 4 -o count_distinct"
    }

    withName: ".*MERGE_PEAKS:FILTER_MIN_OCCURRENCE" {
        ext.args = "'\$NF >= ${params.min_peak_occurrence}'"
        ext.suffix = "bed"
    }

    withName: ".*PEAKS:BEDTOOLS_CLOSEST" {
        ext.args = "-D a -io -iu"
        ext.prefix = {"${meta.id}.closest"}
    }

    withName: ".*PEAKS:FILTER_CLOSEST" {
        ext.args = "'{ if (\$NF <= ${params.max_peak_gap} && \$NF >= 0) {print \$1 \"\\t\" \$3 \"\\t\" \$6 \"\\t\" \$8} }'"
        ext.prefix = {"${meta.id}.filtered"}
        ext.suffix = "bed"
    }

    withName: FILTER_SEQUENCES {
        ext.args = {"'BEGIN {FS=\"\\t\"} !/^#/ && \$2 >= ${params.tepic_affinity_cutoff}'"}
        ext.prefix = {"${meta.id}.filtered"}
        ext.suffix = "tsv"
    }

    withName: BEDIFY_SEQUENCES {
        ext.args = {"-v OFS='\t' '{ if ( NR > 1 ) {sub(/^>/,\"\",\$7); gsub(/\\([^()]*\\)/,\"\",\$1); split(\$7,loc,/:|-/); print loc[1],loc[2]+\$4,loc[2]+\$4+\$5,\$1}}'"}
        ext.prefix = {"${meta.id}.bedified"}
        ext.suffix = "bed"
    }

    withName: SORT_SEQUENCES {
        ext.prefix = {"${meta.id}.sorted"}
    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }

}
